###############################################################################
# NAME:             budget.py
#
# AUTHOR:           Ethan D. Twardy <ethan.twardy@gmail.com>
#
# DESCRIPTION:      Budget logic
#
# CREATED:          02/07/2022
#
# LAST EDITED:      02/07/2022
###

from configparser import ConfigParser
from typing import Dict, List

from ..fund import SinkingFund
from ..account import AccountHistorySummary
from ..income import Income
from ..expense import BudgetedExpense
from .expense import MonthlyExpense

class MonthlyBudget:
    def __init__(self, expenses: Dict[str, List[BudgetedExpense]],
                 incomes: List[Income],
                 accountSummaries: List[AccountHistorySummary],
                 funds: List[SinkingFund]):
        self.expenses = expenses
        self.incomes = incomes
        self.accountSummaries = accountSummaries
        self.funds = funds

    def getExpenseSections(self) -> Dict[str, List[BudgetedExpense]]:
        return self.expenses

    def getIncomes(self) -> List[Income]:
        return self.incomes

    def getAccountSummaries(self) -> List[AccountHistorySummary]:
        return self.accountSummaries

    def getSinkingFunds(self) -> List[SinkingFund]:
        return self.funds

    def getBudgetedExpense(self, expense: MonthlyExpense):
        category = next(filter(lambda x: x == expense.getCategory(),
                               self.expenses.keys()), None)
        return next(filter(
            lambda x: x.getDescription() == expense.getDescription(),
            self.expenses[category]), None)

    def getAccountByName(self, accountName) -> AccountHistorySummary:
        return next(filter(lambda x: x.getAccountName() == accountName,
                           self.accountSummaries), None)

    def applyExpenses(self, expenses: List[MonthlyExpense]):
        for expense in expenses:
            budgetedExpense = self.getBudgetedExpense(expense)
            assert(
                budgetedExpense.getAccountName() == expense.getAccountName()
            )
            account = self.getAccountByName(budgetedExpense.getAccountName())
            budgetedExpense.spend(expense.getAmount())
            account.updateBalance(-1 * expense.getAmount())

    def calculateExpectedBalances(self):
        for income in self.incomes:
            if not income.getAccountName():
                continue # Budget generated by "defaults" has no accounts
            self.getAccountByName(
                income.getAccountName()).updateExpectedBalance(
                    income.getAmount())
        for _, category in self.expenses.items():
            for expense in category:
                if not expense.getAccountName():
                    continue # Budget generated by "defaults" has no accounts
                self.getAccountByName(
                    expense.getAccountName()).updateExpectedBalance(
                        -1 * expense.getBudgeted())

    @staticmethod
    def defaults(defaults: ConfigParser):
        expenses = {}
        incomes = []
        for section in defaults.sections():
            if "Incomes" == section:
                for income in defaults[section]:
                    incomes.append(Income(
                        income, "", float(defaults[section][income])))
            else:
                expenses[section] = []
                for expense in defaults[section]:
                    expenses[section].append(BudgetedExpense(
                        expense, "", float(defaults[section][expense]), 0.0))
        return MonthlyBudget(expenses, incomes, [], [])

###############################################################################
